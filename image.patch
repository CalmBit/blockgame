diff --git a/build.gradle b/build.gradle
index 3d5f3a3..01040f3 100644
--- a/build.gradle
+++ b/build.gradle
@@ -2,6 +2,7 @@ import org.apache.tools.ant.taskdefs.condition.Os
 
 plugins {
     id 'org.jetbrains.kotlin.jvm' version '1.3.31'
+    id 'application'
 }
 
 group 'io.calmbit'
@@ -70,6 +71,17 @@ compileTestKotlin {
     kotlinOptions.jvmTarget = "1.8"
 }
 
+jar {
+    manifest {
+        attributes 'Main-Class': 'StartKt'
+    }
+}
+
+application {
+    mainClassName = 'StartKt'
+    applicationDefaultJvmArgs = ['-XstartOnFirstThread']
+}
+
 test {
     useJUnitPlatform()
 }
\ No newline at end of file
diff --git a/image.patch b/image.patch
new file mode 100644
index 0000000..ea77103
--- /dev/null
+++ b/image.patch
@@ -0,0 +1,54 @@
+diff --git a/build.gradle b/build.gradle
+index 3d5f3a3..01040f3 100644
+--- a/build.gradle
++++ b/build.gradle
+@@ -2,6 +2,7 @@ import org.apache.tools.ant.taskdefs.condition.Os
+ 
+ plugins {
+     id 'org.jetbrains.kotlin.jvm' version '1.3.31'
++    id 'application'
+ }
+ 
+ group 'io.calmbit'
+@@ -70,6 +71,17 @@ compileTestKotlin {
+     kotlinOptions.jvmTarget = "1.8"
+ }
+ 
++jar {
++    manifest {
++        attributes 'Main-Class': 'StartKt'
++    }
++}
++
++application {
++    mainClassName = 'StartKt'
++    applicationDefaultJvmArgs = ['-XstartOnFirstThread']
++}
++
+ test {
+     useJUnitPlatform()
+ }
+\ No newline at end of file
+diff --git a/src/main/kotlin/gl/Texture.kt b/src/main/kotlin/gl/Texture.kt
+index 28d656e..bbaa891 100644
+--- a/src/main/kotlin/gl/Texture.kt
++++ b/src/main/kotlin/gl/Texture.kt
+@@ -4,6 +4,7 @@ import org.lwjgl.opengl.GL31.*
+ import org.lwjgl.stb.STBImage.*
+ import org.lwjgl.system.MemoryStack
+ import java.io.File
++import java.net.URL
+ import java.nio.ByteBuffer
+ 
+ class Texture(file: File) {
+@@ -19,7 +20,9 @@ class Texture(file: File) {
+         glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST)
+         var stack: MemoryStack? = null
+         var img: ByteBuffer? = null
+-        var fileName = File(javaClass.classLoader.getResource("").path, file.path).absolutePath
++        println(file.path)
++        var fileName = javaClass.classLoader.getResource(file.path).path
++        println(fileName)
+         try {
+             stack = MemoryStack.stackPush()
+             var w = stack.mallocInt(1)
diff --git a/src/main/kotlin/gl/Texture.kt b/src/main/kotlin/gl/Texture.kt
index 28d656e..083e9ca 100644
--- a/src/main/kotlin/gl/Texture.kt
+++ b/src/main/kotlin/gl/Texture.kt
@@ -1,9 +1,11 @@
 package gl
 
+import org.lwjgl.BufferUtils
 import org.lwjgl.opengl.GL31.*
 import org.lwjgl.stb.STBImage.*
 import org.lwjgl.system.MemoryStack
 import java.io.File
+import java.net.URL
 import java.nio.ByteBuffer
 
 class Texture(file: File) {
@@ -19,14 +21,19 @@ class Texture(file: File) {
         glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST)
         var stack: MemoryStack? = null
         var img: ByteBuffer? = null
-        var fileName = File(javaClass.classLoader.getResource("").path, file.path).absolutePath
+        println(file.path)
+        val stream = javaClass.classLoader.getResourceAsStream(file.path)
+        val bytes = stream.readBytes()
+        val buf = BufferUtils.createByteBuffer(bytes.size)
+        buf.put(bytes)
+        buf.flip()
         try {
             stack = MemoryStack.stackPush()
             var w = stack.mallocInt(1)
             var h = stack.mallocInt(1)
             var chan = stack.mallocInt(1)
-            img = stbi_load(fileName, w, h, chan, 4)
-                ?: throw RuntimeException("Unable to load " + fileName + "\n" + stbi_failure_reason())
+            img = stbi_load_from_memory(buf, w, h, chan, 4)
+                ?: throw RuntimeException("Unable to load " + file.path + "\n" + stbi_failure_reason())
             width = w.get(0)
             height = h.get(0)
         } finally {
